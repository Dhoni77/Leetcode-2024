-- Write your PostgreSQL query statement below
select s.product_id, q1.first_year, s.quantity, s.price
from sales s
         join (select product_id,
                      min(year)
                          as first_year
               from sales
               group by product_id) q1 on s.product_id = q1.product_id and s.year = q1.first_year


/*
 Approach 1: Filtering from Minimum Value Subquery
Intuition
Let's break down this approach step by step:

Inner Subquery:

SELECT
  product_id,
  MIN(year) AS year
FROM
  Sales
GROUP BY
  product_id
The inner subquery is grouping the Sales table by product_id.
For each product_id, it's finding the minimum year, i.e., the first year a product was sold.
This subquery returns a list of product_ids along with the corresponding first year they were sold.
Main Query:

SELECT
  product_id,
  year AS first_year,
  quantity,
  price
FROM
  Sales
WHERE
  (product_id, year) IN (subquery)
The main query is selecting product_id, year, quantity, and price from the Sales table.
The WHERE clause is using a condition (product_id, year) IN (subquery). This means it's filtering the rows from the Sales table where the combination of product_id and year is present in the list generated by the subquery.
Essentially, this condition ensures that only the rows corresponding to the first year of sale for each product are returned.
Result:

The final result of this query is a table containing the product_id, the first_year a product was sold, the quantity sold, and the price per unit for that year.
Intuitively, what the query does is that it first identifies the first year each product was sold using the inner subquery, and then it fetches the corresponding product_id, year, quantity, and price for those identified years from the main Sales table using the main query.

Implementation
SELECT
  product_id,
  year AS first_year,
  quantity,
  price
FROM
  Sales
WHERE
  (product_id, year) IN (
    SELECT
      product_id,
      MIN(year) AS year
    FROM
      Sales
    GROUP BY
      product_id
  );

 Approach 2:

    The code selects the product_id, year (renamed as first_year), quantity, and price from a subquery.
    The subquery ranks the rows by year within each product_id using the rank() function.
    The outer query then filters the results to only include rows where the year rank is equal to 1, meaning it selects the first year for each product_id.

    Step-by-step explanation of the code:
    1. The subquery selects all columns from the "sales" table and adds a new column called "year_rnk" using the rank() function.
    2. The rank() function is used to assign a rank to each row within each product_id group based on the order of the year. So, the row with the earliest year for each product_id will have a rank of 1.
    3. The subquery is aliased as "tbl" to be referenced in the outer query.
    4. The outer query selects the product_id, year (renamed as first_year), quantity, and price from the subquery.
    5. The where clause filters the results to only include rows where the year rank is equal to 1, meaning it selects the first year for each product_id.

    select product_id, year as first_year, quantity, price
    from(
    select *,
    rank() over(partition by product_id order by year) as year_rnk
    from sales) as tbl
    where year_rnk = 1
 */